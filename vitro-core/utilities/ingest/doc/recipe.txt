

work

work/xslt
	xslt/aiic-chain.xslc 
	xslt/aiic-addAuthSummary.xsl
	xslt/aiic-addIndex.xsl
	xslt/aiic-Filter.xsl

work/Raw_XMLs
	Raw_XMLs/aa299.xml
	Raw_XMLs/aa337.xml
	Raw_XMLs/aa34.xml
	Raw_XMLs/aad4.xml
	Raw_XMLs/aaf33.xml
	Raw_XMLs/aag27.xml
	***

work/AIIC_XMLs
	AIIC_XMLs/AIIC_aa299.xml
	AIIC_XMLs/AIIC_aa337.xml
	AIIC_XMLs/AIIC_aa34.xml
	AIIC_XMLs/AIIC_aad4.xml
	AIIC_XMLs/AIIC_aaf33.xml
	AIIC_XMLs/AIIC_aag27.xml
	***

work/log 
	 
work/bin
work/bin/aiget*
work/bin/mklist*
work/bin/xsltseq*
work/bin/saxon9he.jar

Working (issuing commands) from the directory 'work':

Step 0: Get all users by netid from Activity Insight by invoking
the following commands. Of course, you will need the password
to replace the asterisks.

   bin/GET.pl -o dump -C 'cornell/fac_reports:********'  
       https://www.digitalmeasures.com/login/service/v4/User > Users.xml
   wget -O - --http-user cornell/fac_reports --http-passwd *********
       https://www.digitalmeasures.com/login/service/v4/User > Users.xml

   bin/xtract_netids Users.xml | sort | uniq  > ai_users.txt

Step 1: Extract the netids from the returned XML and 
put them in a file called 'ai_users.txt' in the work directory

Step 2: Create (if needed) a directory called Raw_XMLs and
issue the following command to get a user xml for each netid
in 'ai_users.txt'. This will take about 1.5 to 2 hours.

   bin/waiget -L log -U -b . -o Raw_XMLs

Step 3: Check results. At this point Raw_XMLs should have about 1755
xml files. This number should change over time as more people are
added and people leave. Suggestion: Open a file or two to see if things
look reasonable.

Step 4: This step will take a little more than two hours. During this
time three XSLTs will be applied to each netid xml file and the
results will be placed in an output directory called AIIC_XMLs, which
will need to be created in advance. AIIC stands for Activity Insight
Intellectual Contribution. 

	a) aiic-Filter.xsl		Extract AIIC related tags
	b) aiic-addIndex.xsl		Add authorship rank integer
	c) aiic-addAuthSummary.xsl      Add authorship and journal summaries

The file xslt/aiic-chain.xslc enumerates these transforms in order.

Issue the following command to start this process:

   bin/xsltseq -I ./Raw_XMLs -O ./AIIC_XMLs -X xslt/aiic-chain.xslc -p AIIC_ 

Look in outdirpath to see processed netid xmls appear they will have
a prefix of 'AIIC_', for example 'AIIC_aa299.xml' where aa299 is a netid.

Step 5: Construct an xml file that is of the form

     <?xml version='1.0'?>
     <collection>
        <doc href='./AIIC_XMLs/AIIC_aa299.xml'/>
        <doc href='./AIIC_XMLs/AIIC_aa337.xml'/>
	...
        <doc href='./AIIC_XMLs/AIIC_ZW16.xml'/>
        <doc href='./AIIC_XMLs/AIIC_ZW24.xml'/>
     </collection>

This file is used by the XSLT 2.0 collection() function to span all
AIIC processed files when we summarize journals and authors over all
netids. The mklist utility will build this xml for you by issuing the
command:

   bin/mklist -d ./AIIC_XMLs -D ./AIIC_XMLs > aiiclist.xml

construct a mapping of activity insight id to netid (for cornell authors)

   java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar empty.xml 
        xslt/aiid2netid.xsl listxml=../aiiclist.xml > aiid-netid.xml

Step 6: To collect all articles for each author from all AIIC xmls, issue
the following command. Notice the 'listxml' parameter, the 'aiid2netid' parameter and the output
file

   java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar empty.xml 
        xslt/collectAuthors.xsl listxml=../aiiclist.xml aiid2netid=../aiid-netid.xml > /tmp/ca.xml

Step 7: To identify articles mentioned in multiple AIIC xmls, issue
the following command:

   'java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar /tmp/ca.xml 
        xslt/collectAuthorsListingDistinctArticles.xsl > /tmp/cad.xml'

   java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar /tmp/ca.xml 
        xslt/groupAuthorsArticles.xsl > /tmp/cad.xml

Step 8: To sort an author's articles by Activity Insight id, issue
the following command:

   java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar /tmp/cad.xml  
        xslt/aiicsort.xsl >  cadsorted.xml

Step 9: To collect all articles for each journal from all AIIC xmls, issue
the following command. Notice the 'listxml' parameter and the output
file

   java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar empty.xml 
        xslt/collectJournals.xsl listxml=../aiiclist.xml > /tmp/cj.xml

Step A: To identify articles mentioned in multiple AIIC xmls, issue
the following command:

   java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar /tmp/cj.xml 
        xslt/collectJournalsListingDistinctArticles.xsl > /tmp/cjd.xml

Step B: To sort a journal's articles by Activity Insight id, issue
the following command:

   java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar /tmp/cjd.xml  
        xslt/aiicsort.xsl >  cjdsorted.xml

Step B1:

java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar empty.xml xslt/collectIntellcontAuthors.xsl listxml=../aiiclist.xml aiid2netid=../aiid-netid.xml > cica.xml
Step B2:
java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar cica.xml xslt/groupAuthorsIntellconts.xsl > cicad.xml


Step C: construct a mapping from {1,...,N} -> Unos

   grep counter /tmp/cad.xml | wc -l  (e.g. 22530)
   nuno -X -n 22530 -t AI-  > unomap.xml

Step D: construct rdf using ../aiid-netid.xml and ../unomap.xml should be params

     java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar cads.xml xslt/mkrdf.xsl > icja.rdf
     java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar Test-cads.xml xslt/mkrdf.xsl          abyjFile=../cjds.xml unoMapFile=../unomap.xml > Test-icjabya.rdf

java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar nucads.xml  xslt/mkrdf.xsl abyjFile=../nucjds.xml unoMapFile=../unomap.xml aiicXmlPath=../AIXMLS/AIICJA_20100607161719 aiicPrefix=AIICJA_ > nu-icjabya.rdf

java -Xmx1024m -Xms1024m -jar bin/saxon9he.jar nucads.xml  xslt/mkrdf.xsl abyjFile=../nucjds.xml unoMapFile=../unomap.xml aiicXmlPath=../AIXMLS/AIICJA_20100610120510 aiicPrefix=AIICJA_ > nu-icjabya.rdf

Step E: sort the results

     java -Xms1024m -Xmx1024m -jar bin/saxon9he.jar icja.rdf xslt/rdfsort.xsl > sicja.rdf
     java -Xms1024m -Xmx1024m -jar bin/saxon9he.jar Test-icjabya.rdf xslt/rdfsort.xsl > Test-sicjabya.rdf
java -Xms1024m -Xmx1024m -jar bin/saxon9he.jar nu-icjabya.rdf xslt/rdfsort.xsl > nu-sicjabya.rdf

Step F: count the Journals in cjdsorted.xml and construct a map  {1,...,N} -> Unos
grep JOURNAL_NAME nucjds.xml | wc
nuno -X -n 7200 -t AJ- > ajnunos.xml
Step 11: create rdf for journals, core:hasPublicationVenue, core:publicationVenueFor

java -Xms1024m -Xmx1024m -jar bin/saxon9he.jar altcjdsorted.xml xslt/mkjrdf.xsl > cj.rdf
java -Xms1024m -Xmx1024m -jar bin/saxon9he.jar nucjds.xml xslt/mkjrdf.xsl > nucj.rdf