#!/usr/bin/perl
use FindBin qw($Bin);
use lib $Bin;
use Getopt::Std;
use FileHandle;
use POSIX ":sys_wait_h";
use POSIX qw( strftime );
use Fcntl qw/:DEFAULT :flock/;
use English;

getopts('cCn:t:Xs:');
#DOCSTART
#
#  %Z%%M%  $Revision: %I%, %G% %U% $
#
#  Name:  %M%
#  Desc:
#  HISTORY: written by Joseph Mc Enerney 2006
#  based on prior work
#
#
#
#DOCEND

@hexchars = split //,"0123456789ABCDEF";


sub hexcheck{
    my($s) = @_;
    my @tidbits = split //, $s;
    if(scalar(@tidbits) > 8){
	print "$s is too long, 8 hex chars expected.\n";
	return "_ERROR_";
    }
    for(my $n=0;$n < scalar(@tidbits);$n++){
	my $ok = 0;
	for(my $m=0; $m < 16; $m++){
	    if(uc($tidbits[$n]) eq $hexchars[$m]){
		$ok = 1;
		last;
	    }
	}
	if($ok != 1){
	    print "$s is not a hex string, 8 hex chars expected.\n";
	    return "_ERROR_";
	}
    }
    # pad with leading zeros
    if(scalar(@tidbits) < 8){
	$s = "0"x(8-scalar(@tidbits)) . $s;
    }
    return uc($s);

}

$twist = $opt_t?$opt_t:'';

$f = shift;

$N = $opt_n?$opt_n:1;

$inode = myinode($f);

$prefix = $twist . sprintf("%04lX",$REAL_USER_ID) . $inode;
if($opt_s ne ''){
    my $s = hexcheck($opt_s);
    exit 1 if($s eq "_ERROR_");
    setUno($f,$s);
    printf("%s\n",$s);
} elsif($opt_c){
    my $next .= curUno($f);
    if($opt_C){
	print $next . "\n";
    } else {
	print $prefix . $next . "\n";
    }
} else {
    print "<?xml version='1.0'?>\n<Mapping>\n" if $opt_X;
    for(my $i=1;$i<=$N;$i++){
	my $next = nextUno($f);
	if($opt_X){
	    print "<map n='$i' nuno='$prefix$next'/>\n";
	} else {
	    print $prefix . $next . "\n";
	}
    }
    print "</Mapping>\n" if $opt_X;
}

sub myinode {
    my($file) = @_;
    if(!defined($file)){
        $file = "./.Uno";
    }
    if( -e $file && (!-r _ || !-w _)){
	print STDERR "$file not useable.\n";
	return "00000000";
    }
    qx(touch $file) if ! -e _ ;
    my $inode;

    ($inode) = split /\s/,qx(ls -i $file);
    return sprintf("%07lX",$inode);
}
sub nextUno {
    my($file) = @_;
    my($res,$n,$m,$ctr,$inode);
    if(!defined($file)){
        $file = "./.Uno";
    }
    #print LOGIT "Uno: $file\n";
    if( -e $file && !(-r _ || !-w _)){
	return "00000000";
    }
 
    sysopen(CTR,$file, O_RDWR | O_CREAT);
    autoflush CTR 1;
    flock(CTR, LOCK_EX);
    $ctr = <CTR> || "00000000";
    seek (CTR,0,0);
    $n = $m = hex( $ctr );
    
    $n++;
    #print LOGIT "Uno: $n\n";
    $n = 0 if($n >= 0xFFFFFFFF);
    printf CTR "%08lX",$n;
    close CTR;
    return sprintf("%08lX",$m);
}
sub setUno {
    my($file,$n) = @_;
    my($res);
    if(!defined($file)){
        $file = "./.Uno";
    }
    sysopen(CTR,$file, O_RDWR | O_CREAT);
    autoflush CTR 1;
    flock(CTR, LOCK_EX);
    print CTR $n;
    close CTR;
}
sub curUno {
    my($file) = @_;
    my($res,$n,$m,$ctr);
    if(!defined($file)){
        $file = "./.Uno";
    }
    #print LOGIT "Uno: $file\n";
    if( -e $file && (!-r _ || !-w _)){
	return "00000000";
    }
    sysopen(CTR,$file, O_RDWR | O_CREAT);
    flock(CTR, LOCK_EX);
    $ctr = <CTR> || "00000000";
    seek (CTR,0,0);
    $n = $m = hex( $ctr );
    close CTR;
    return sprintf("%08lX",$m);

}


1;
