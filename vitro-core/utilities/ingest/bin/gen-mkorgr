#!/usr/bin/perl
use FindBin qw($Bin);
use lib $Bin;
use Getopt::Long;
use FileHandle;
use POSIX qw( strftime );

@av = @ARGV;


$g_t0 = time();
$g_STARTED_AT = strftime("%Y\%m%d%H\%M\%S", localtime($g_t0) );

if(scalar(@ARGV) == 0 || $op_usage){
    Usage();
    exit 1;
}
$g_cwd = $ENV{'PWD'};

GetOptions('obj=s' => \$op_obj,
	   'nsp=s' => \$op_nsp,
	   'class=s' => \$op_class,
	   'ont=s' => \$op_ont,
	   'to=s' => \$op_to,
	   'from=s' => \$op_from
	);

if(!$op_obj || !$op_nsp || !$op_class){
    print STDERR "--class, --obj and --nsp must all be supplied\n";
    exit 1;
}

$_ONT = "http://vivoweb.org/activity-insight#";
$_ONT = $op_ont if $op_ont;

$_OBJ = $op_obj;
$_nsp = $op_nsp;
$_CLASS = $op_class;
$_DPROP = lcfirst $op_class;
$_TO = $op_to?$op_to:"???";
$_FROM = $op_from?$op_from:"???";


sub mkTransform{
        my $transform=<<"__STYLESHEET__";
<?xml version="1.0"?>
<xsl:stylesheet version='2.0'
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:xs='http://www.w3.org/2001/XMLSchema'
xmlns:core="http://vivoweb.org/ontology/core#"
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:bibo="http://purl.org/ontology/bibo/"
xmlns:foaf="http://xmlns.com/foaf/0.1/"
xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
xmlns:$_nsp="http://vivoweb.org/activity-insight"
xmlns:acti="http://vivoweb.org/activity-insight#"
xmlns:dm="http://www.digitalmeasures.com/schema/data"	
xmlns:vfx='http://vivoweb.org/ext/functions'
exclude-result-prefixes='xs vfx dm $_ns'
>

<xsl:param name='unoMapFile'  required='yes'/>

<xsl:param name='extOrgIn' required='yes'/>
<xsl:param name='extOrgOut' required='yes'/>

<xsl:output method='xml' indent='yes'/>
<xsl:strip-space elements="*"/>

<xsl:include href='commonvars.xsl'/>

<xsl:variable name='unomap'
	select="document(\$unoMapFile)/Mapping"/>

<xsl:variable name='extantOrgs'
	select="document(\$extOrgIn)/ExtantOrgs"/>

<xsl:template match='/$_nsp:$_OBJ\_ORG_LIST'>
<rdf:RDF>
<xsl:for-each select='$_nsp:$_OBJ\_ORG'>

<xsl:variable name='ctr'  select='\@index'/>
<xsl:variable name='uno' select='\$unomap/map\[position()=\$ctr\]/\@nuno'/>

<!-- =================================================== -->
<!-- Declare a foaf:Organization (use extant org if it exists) -->

<xsl:variable name='knownUri' 
select='vfx:knownOrgUri(vfx:trim($_nsp:$_OBJ\_ORG_NAME), \$extantOrgs)'/>

<xsl:variable name='orguri' 
select="if(\$knownUri != '') then \$knownUri else 
concat(\$g_instance,\$uno)"/>

<xsl:if test='\$knownUri = ""'>
<rdf:Description rdf:about="{\$orguri}">
<rdf:type 
rdf:resource='http://vitro.mannlib.cornell.edu/ns/vitro/0.7#Flag1Value1Thing'/>
<rdf:type rdf:resource='http://xmlns.com/foaf/0.1/Organization'/>
<rdfs:label>
<xsl:value-of select='vfx:trim($_nsp:$_OBJ\_ORG_NAME)'/>
</rdfs:label>
</rdf:Description>
</xsl:if>

<!-- now process the $_OBJ attributed to this org -->
<xsl:call-template name='process-org'>
<xsl:with-param name='list' select='$_nsp:$_OBJ\_LIST'/>
<xsl:with-param name='objref' select="\$orguri"/>
</xsl:call-template>

</xsl:for-each>

<!-- =================================================== 
 at this point we re-run part of the last for loop to get a new list of
 orgs
 and their uri\'s to save in the extant Orgs Out xml file
-->
<xsl:result-document href='{\$extOrgOut}'>
<xsl:element name='ExtantOrgs' namespace=''>
<xsl:for-each select='$_nsp:$_OBJ\_ORG'>
<xsl:variable name='ctr'  select='\@index'/>
<xsl:variable name='uno' select='\$unomap/map\[position()=\$ctr\]/\@nuno'/>
<xsl:variable name='knownUri' 
select='vfx:knownOrgUri(vfx:trim($_nsp:$_OBJ\_ORG_NAME), \$extantOrgs)'/>

<xsl:variable name='orguri' 
select="if(\$knownUri != '') then \$knownUri else 
concat(\$g_instance,\$uno)"/>
<!-- must prevent duplicates -->
<xsl:if test="\$knownUri = ''">
<xsl:element name='org' namespace=''>
<xsl:element name='uri' namespace=''>
<xsl:value-of select='\$orguri'/>
</xsl:element>
<xsl:element name='name' namespace=''>
<xsl:value-of select='vfx:trim($_nsp:$_OBJ\_ORG_NAME)'/>
</xsl:element>
</xsl:element>
</xsl:if>
</xsl:for-each>
</xsl:element>
</xsl:result-document>
</rdf:RDF>
<xsl:value-of select='\$NL'/>
</xsl:template>

<xsl:template name='process-org'>
<xsl:param name='list'/>
<xsl:param name='objref'/>
<xsl:for-each select='\$list/$_nsp:$_OBJ\_INFO'>
<xsl:variable name='objid' select='\@id'/>
<!-- =================================================== -->
<!-- Declare property mapping ???$_CLASS to foaf:Organization -->
<!-- 1 -->
<rdf:Description 
rdf:about="{concat(\$g_instance,'AI-',\$objid)}" >
<$_TO:$_DPROP\Of
	rdf:resource="{\$objref}"/>
</rdf:Description>

<!-- =================================================== -->
<!-- Declare property from foaf:Organization to ???$_CLASS -->
<!-- 2 -->
<rdf:Description rdf:about="{\$objref}">
<$_FROM:has$_CLASS
rdf:resource="{concat(\$g_instance,'AI-',\$objid)}"/>
</rdf:Description>
</xsl:for-each>
</xsl:template>

<!-- ================================== -->


<xsl:include href='vivofuncs.xsl'/>

</xsl:stylesheet>
__STYLESHEET__

    return $transform;
}
print mkTransform();
