<?xml version="1.0" encoding="UTF-8"?>

<!-- $This file is distributed under the terms of the license in /doc/license.txt$-->

<!-- ====================================================================== 
     Build script for the Vivo Products.
                   
     jeb228                                                                
     ======================================================================-->
<project name="vivoProduct" default="describe">

	<!--
     This script should not be run on its own. 
     It should only be run from the build script of an individual Product.
    -->
	<fail>
		<condition>
			<equals arg1="${ant.file.vivoProduct}" arg2="${ant.file}" />
		</condition>
        This script should not be run by itself.
        It should be invoked from the build script of a Vivo product.
    </fail>

	<!-- - - - - - - - - - - - - - - - - - 
      properties
                                
      File paths are based on this file's parent directory, so we can find 
      the files even when this script is included into an individual 
      Product build script.
     - - - - - - - - - - - - - - - - - -->
	<dirname property="vivoProduct.basedir" file="${ant.file.vivoProduct}" />
	<import file="${vivoProduct.basedir}/build.xml" />

	<!-- Is there a "src" directory in the product? -->
	<property name="product.source.dir" location="./src" />
	<available property="product.sources.exist" file="${product.source.dir}" />

	<!-- Is there a "test" directory in the product? -->
	<property name="product.test.dir" location="./test" />
	<available property="product.tests.exist" file="${product.test.dir}" />

	<!-- Is there a "themes" directory in the product? -->
	<property name="product.themes.dir" location="./themes" />
	<available property="product.themes.exist" file="${product.themes.dir}" />

	<!-- Is there a modifications directory in the product? -->
	<property name="product.modifications.dir" location="./modifications" />
	<available property="product.modifications.exist" file="${product.modifications.dir}" />

	<!-- If there is a WEB-INF/lib in the mods directory, it goes into the compile classpath -->
	<!-- Otherwise, use a real directory but disable the "include" in the fileset -->
	<available property="product.mods.lib.exists" file="${product.modifications.dir}/WEB-INF/lib" />
	<condition property="product.mods.lib.dir"
	           value="${product.modifications.dir}/WEB-INF/lib"
	           else="${webapp.dir}/lib">
		<available file="${product.modifications.dir}/WEB-INF/lib" />
	</condition>

	<path id="product.compile.classpath">
		<pathelement location="${classes.dir}" />

		<!-- These come before the core classpath, so our local mods can override -->
		<fileset dir="${product.mods.lib.dir}">
			<include name="**/*.jar" if="product.mods.lib.exists" />
		</fileset>

		<path refid="compile.classpath" />
	</path>

	<path id="product.test.compile.classpath">
		<path refid="test.compile.classpath" />
	</path>

	<path id="product.test.run.classpath">
		<path refid="test.run.classpath" />
	</path>


	<!-- ================================= 
          target: describe              
         ================================= -->
	<target name="describe" description="--> Describe the targets (this is the default).">
		<echo>
all      - Runs "clean", then "deploy".
clean    - Delete all artifacts so the next build will be from scratch.
compile  - Compile the Java source files.
test     - Compile and run the JUnit tests.
war      - Assemble everything into a deployable WAR file.
deploy   - Deploy the application directly into the Tomcat webapps directory.
        </echo>
	</target>

	<!-- ================================= 
          target: all              
         ================================= -->
	<target name="all" depends="clean, deploy" description="--> Run 'clean', then 'deploy'" />

	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" depends="vitroCore.clean" description="--> Delete all artifacts.">
	</target>

	<!-- ================================= 
          target: compile              
         ================================= -->
	<target name="compile"
	        depends="vitroCore.compile, productCompile"
	        description="--> Compile Java sources.">
	</target>

	<!-- ================================= 
          target: test              
         ================================= -->
	<target name="test"
	        depends="vitroCore.test, productTest"
	        unless="skiptests"
	        description="--> Run JUnit tests">
	</target>

	<!-- ================================= 
          target: deploy              
         ================================= -->
	<target name="deploy"
	        depends="productCopy, vitroCore.deploy"
	        description="--> Build the app and install in Tomcat">
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: productCopy                      
         - - - - - - - - - - - - - - - - - -->
	<target name="productCopy" depends="copyEtc, test">
		<copy todir="${build.dir}/war/themes" overwrite="true">
			<fileset dir="${product.themes.dir}" />
		</copy>

		<copy todir="${build.dir}/war" overwrite="true">
			<fileset dir="${product.modifications.dir}" />
		</copy>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: productCompile                      
         - - - - - - - - - - - - - - - - - -->
	<target name="productCompile" depends="vitroCore.compile" if="product.sources.exist">
		<!-- deletes all files that depend on changed .java files -->
		<depend srcdir="${product.source.dir}"
		        destdir="${build.dir}/war/WEB-INF/classes"
		        closure="false"
		        cache="${build.dir}/.depcache">
			<classpath refid="product.compile.classpath" />
		</depend>

		<javac srcdir="${product.source.dir}"
		       destdir="${build.dir}/war/WEB-INF/classes"
		       debug="true"
		       deprecation="true"
		       optimize="true"
		       source="1.5">
			<classpath refid="product.compile.classpath" />
		</javac>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: productTest                      
         - - - - - - - - - - - - - - - - - -->
	<target name="productTest" depends="vitroCore.test" if="product.tests.exist" unless="skiptests">
		<javac srcdir="${product.test.dir}"
		       destdir="${test.classes.dir}"
		       debug="true"
		       deprecation="true"
		       optimize="false"
		       source="1.5">
			<classpath refid="product.test.compile.classpath" />
		</javac>

		<java classname="edu.cornell.mannlib.vitro.testing.VitroTestRunner"
		      fork="yes"
		      failonerror="true">
			<classpath refid="product.test.run.classpath" />
			<arg file="${product.test.dir}" />
			<arg value="${testlevel}" />
		</java>
	</target>

	<!-- ================================= 
          target: licenser             
          
          In regular use, checks that all appropriate source files have license tags.
          At release time, applies license text to source files.
          
          NOTE: don't override licenser.properties.file from the command line.
          Instead, override licenser.core.properties.file and licenser.product.properties.file
         ================================= -->
	<target name="licenser" description="--> Check source files for licensing tags">
		<!-- Once for the product... -->
		<antcall target="vitroCore.licenser">
			<param name="licenser.properties.file" value="${licenser.product.properties.file}" />
			<param name="licenser.label" value="${ant.project.name}" />
		</antcall>

		<!-- ...and once for the core. -->
		<condition property="licenser.properties.file" value="${licenser.core.properties.file}">
			<isset property="licenser.core.properties.file" />
		</condition>
		<antcall target="vitroCore.licenser" />
	</target>
</project>
